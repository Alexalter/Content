DEVELOPER CONTENTTYPE UPGRADE 3.x -> 4.x
========================================

The structure and naming schemes have changed for Content 4.x. This document
explains changes that must be made in other third-party modules in order to
maintain compatibility with the newest versions of Content. There is no
possibility for complete backward compatibility (i.e. with no changes to your
files). You will, however, be able reuse most of what you already have.

There are four important areas to cover:

  - Filenames and Classnames (Zikula standard naming schemes)
  - ContentType class files
  - Templates (including custom naming options)
  - Module upgrade routine

Remember, Content 4.x is for Zikula 1.3 and higher and therefore your module
must also be Zikula 1.3-compatible (or native).


## Filenames & Class names

The rules in Zikula 1.3 require class names to begin with uppercase letters and
for underscores only used to indicate directory structure. Each word must be
capitalized and you cannot use other characters (numbers and letters only, but
must begin with a capital letter). For example:

    Content_Form_Handler_Admin_Settings

is found in

    modules/Content/lib/Content/Form/Handler/Admin/Settings.php

You can see the relationship between the class name and the directory structure.
Additional underscores, etc, are not allowed.


## ContentType class files

Move your existing pncontenttypesapi files to

    ModuleName/lib/ModuleName/ContentType/Pluginname.php

rename the classes within to

    ModuleName_ContentType_Pluginname extends Content_ContentType

(replace the 'ModuleName' with your *actual* module name - with Caps)

Please note that the word 'Plugin' and 'Base' have been removed from class names.

Be sure your filename and the last part of your class name are exactly the same.
They must begin with a capital letter and contain only a-z/A-Z/0-9
(no spaces or underscores).

  - Remove the getModule method. It is no longer required.
  - Remove the getName method. It is no longer required.
  - *Both the module name and the plugin name are derived from the class name*

  - If you use a constructor method in your class, be sure to call the parent
constructor within:

    parent::__construct();

  - In the display() method within your plugin, change the return value to look
    like so:

    return $view->fetch($this->getTemplate());

  - Instantiating the Zikula_View object is not required. Remove these lines:

    $view = Zikula_View::getInstance('ModuleName', false);

and replace

    $view->foo()

with

    $this->view->foo()

  - Change your property declarations from 'var' to 'protected' unless
    specifically required. Make all your methods 'public'.

  - Check your method arguments against the base class to be sure that the
    declarations are consistent to avoid E_STRICT warnings.

  - Remove the function at the bottom of your plugin file that instantiates the
    class. This is no longer required.

### GetText usage within classes
There is no need to assign the translation domain to a variable ($dom) and
include it as a method argument. You can do the same thing you would do in
a module controller instead:

    $this->__('my translated text');


## Templates

Contentype templates may remain in the templates/contentype/ directory but must
be renamed with a .tpl suffix

The default name of the template should duplicate the name of the plugin, but be
all lowercase.

ContentType plugins should have '_view' and '_edit' suffix versions.

for example:
    Plugin name: GoogleMap.php
    View template: googlemap_view.tpl
    Edit template: googlemap_edit.tpl

Translation templates should use the same naming scheme, but contain the
appropriate suffixes:

    New template: googlemap_translate_new.tpl
    Original template: googlemap_translate_original.tpl

### Custom template naming

If you prefer, you can (since Content v4.0.0) name your templates anything
you like and set the template name in the plugin class.

See the Content_ContentType class for the methods. All you need to do is
override any or all of these methods:

  - getTemplate()
  - getEditTemplate()
  - getTranslationTemplates()

Override these methods in your plugin class and change them to return the name
of the template you wish instead of the default naming scheme. Using this
override, you can name the templates anything you like, including changing the
directory and suffix if you require it.


## Module upgrade routine

The names of your plugins are stored in the Content module's database tables.
These must be updated or existing templates will no longer function.

In your Installer upgrade routine, add the following line for your newest
version (you only need each line as appropriate):

    Content_Installer::updateContentType('modulename');

(replace the 'modulename' with your *actual* module name)

Also, you must create a method within your module's installer class to map
the old plugin names to the new plugin names. Using **your own** legacy plugin 
names, it should look something like this:

    protected function LegacyContentTypeMap()
    {
        $oldToNew = array(
            'author' => 'Author',
            'block' => 'Block'
        );
        return $oldToNew;
    }

See the Content_Installer class for complete examples.

All the Plugins in the Content module have been converted and are good examples.
Please take a look there for further ideas. In addition, the following modules
have already been converted as of this writing:
  - News
  - PostCalendar